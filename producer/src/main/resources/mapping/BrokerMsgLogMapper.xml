<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.rabbitmq.dao.BrokerMsgLogMapper">
    <resultMap id="BaseResultMap" type="com.rabbitmq.entity.BrokerMsgLog">
        <id column="msg_id" jdbcType="VARCHAR" property="msgId"/>
        <result column="message" jdbcType="VARCHAR" property="message"/>
        <result column="status" jdbcType="VARCHAR" property="status"/>
        <result column="try_count" jdbcType="INTEGER" property="tryCount"/>
        <result column="time_out" jdbcType="TIMESTAMP" property="timeOut"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>
    <sql id="Base_Column_List">
    msg_id, message, status, try_count, time_out, create_time, update_time
  </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from broker_msg_log
        where msg_id = #{msgId,jdbcType=VARCHAR}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from broker_msg_log
    where msg_id = #{msgId,jdbcType=VARCHAR}
  </delete>
    <insert id="insert" parameterType="com.rabbitmq.entity.BrokerMsgLog">
    insert into broker_msg_log (msg_id, message, status, 
      try_count, time_out, create_time, 
      update_time)
    values (#{msgId,jdbcType=VARCHAR}, #{message,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, 
      #{tryCount,jdbcType=INTEGER}, #{timeOut,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP})
  </insert>
    <insert id="insertSelective" parameterType="com.rabbitmq.entity.BrokerMsgLog">
        insert into broker_msg_log
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="msgId != null">
                msg_id,
            </if>
            <if test="message != null">
                message,
            </if>
            <if test="status != null">
                status,
            </if>
            <if test="tryCount != null">
                try_count,
            </if>
            <if test="timeOut != null">
                time_out,
            </if>
            <if test="createTime != null">
                create_time,
            </if>
            <if test="updateTime != null">
                update_time,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="msgId != null">
                #{msgId,jdbcType=VARCHAR},
            </if>
            <if test="message != null">
                #{message,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                #{status,jdbcType=VARCHAR},
            </if>
            <if test="tryCount != null">
                #{tryCount,jdbcType=INTEGER},
            </if>
            <if test="timeOut != null">
                #{timeOut,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.rabbitmq.entity.BrokerMsgLog">
        update broker_msg_log
        <set>
            <if test="message != null">
                message = #{message,jdbcType=VARCHAR},
            </if>
            <if test="status != null">
                status = #{status,jdbcType=VARCHAR},
            </if>
            <if test="tryCount != null">
                try_count = #{tryCount,jdbcType=INTEGER},
            </if>
            <if test="timeOut != null">
                time_out = #{timeOut,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where msg_id = #{msgId,jdbcType=VARCHAR}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.rabbitmq.entity.BrokerMsgLog">
    update broker_msg_log
    set message = #{message,jdbcType=VARCHAR},
      status = #{status,jdbcType=VARCHAR},
      try_count = #{tryCount,jdbcType=INTEGER},
      time_out = #{timeOut,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where msg_id = #{msgId,jdbcType=VARCHAR}
  </update>

    <update id="updateOrderStatus" parameterType="com.rabbitmq.entity.BrokerMsgLog">
    update broker_msg_log
    set status = #{status,jdbcType=VARCHAR},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where msg_id = #{msgId,jdbcType=VARCHAR}
  </update>

    <update id="retryAddOne" parameterType="com.rabbitmq.entity.BrokerMsgLog">
    update broker_msg_log
    set try_count = try_count+1
    where msg_id = #{msgId,jdbcType=VARCHAR}
  </update>

    <select id="getAllByStatusAndOut" resultMap="BaseResultMap" parameterType="com.rabbitmq.entity.BrokerMsgLog">
        select
        <include refid="Base_Column_List"/>
        from broker_msg_log
        where status = 0 AND time_out >= SYSDATE()
    </select>
</mapper>